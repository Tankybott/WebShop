@model Cart?

<meta @StaticData.CartIdMetaSelector content="@Model?.Id" />
<div class="container">
    <div class="card shadow border-0">
        <div class="card-header bg-primary bg-gradient text-light ml-0 py-4">
            <div class="row px-4">
                <div class="col-6">
                    <h5 class="pt-2 text-white">
                        Shopping Cart
                    </h5>
                </div>

            </div>
        </div>
        <div class="card-body my-4">
            <div class="row">
            </div>
            <div class="row mb-3 pb-3">
                <div class="col-md-2 offset-md-1">
                    <a asp-area="User" asp-controller="ProductBrowser" asp-action="Index" class="btn btn-outline-primary text-uppercase mb-5 btn-sm"><small>Continue Shopping</small></a>
                </div>
                <div class="col-md-10 offset-md-1">
                    @if (Model != null && Model.Items != null)
                    {
                        foreach (var item in Model.Items)
                        {
                            <div class="row border-bottom pb-3 mt-1">
                                <meta @StaticData.CartItemIdMetaSelector content="@item.Id">
                                <meta @StaticData.ProductIdMetaSelector content="@item.Product.Id">
                                <meta @StaticData.CurentPriceMetaSelector content="@item.CurrentPrice">
                                <div class="d-none d-lg-block col-lg-1 text-center py-2">
                                    <img src="@item?.Product?.PhotosUrlSets?.FirstOrDefault(p => p.IsMainPhoto == true)?.ThumbnailPhotoUrl" class="rounded" width="100%" />
                                </div>
                                <div class="col-12 col-md-3 d-flex align-items-center p-2 pt-0">
                                    <h5 class="text-uppercase text-secondary"><strong>@item?.Product.Name</strong></h5>
                                </div>
                                @if (item.CurrentPrice < item.Product.Price)
                                {
                                    <div class="col-3 col-md-2 text-md-right d-flex flex-column justify-content-center">
                                        <p class="fw-bold text-muted">Per Item:</p>
                                        <p class="fw-bold text-muted text-decoration-line-through">@item.Product.Price.ToString("F2")  @ViewBag.Currency</p>
                                    </div>
                                    <div class="col-3 col-md-2 text-md-right d-flex flex-column justify-content-center fw-bold border border-primary border-2 rounded">
                                        <p class="fw-bold">Per Item NOW:</p>
                                        <p class="fw-bold text-primary">@item.CurrentPrice.ToString("F2")</p>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-3 col-md-2">
                                    </div>
                                    <div class="col-3 col-md-2 text-md-right d-flex flex-column justify-content-center">
                                        <p class="fw-bold">Per Item:</p>
                                        <p class="fw-bold">@item.CurrentPrice.ToString("F2") @ViewBag.Currency</p>
                                    </div>
                                }
                                <div class="col-3 col-md-2 text-md-right d-flex flex-column justify-content-center align-items-center">
                                    <label class="text-center text-muted" for="prodQuantity">Product Quantity</label>
                                    <input @StaticData.inputSelector id="prodQuantity" value="@item.ProductQuantity" type="number" class="form-control text-end" />
                                </div>
                                <div class="col-3 col-md-2 d-flex justify-content-center align-items-center">
                                    <button @StaticData.ItemDeleteButtonSelector class="btn btn-danger bg-gradient py-2 ">
                                        <i class="bi bi-trash-fill"></i>
                                    </button>
                                </div>
                                <p @StaticData.WarningParagraphSelector class="text-danger col-12 text-center p-1 mt-1"></p>
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="card-footer bg-white border-0">
                <div class="row">
                    <div class="col-md-4 offset-md-4">
                        <ul class="list-group mb-4">
                            <li class="d-flex justify-content-between align-items-center">
                                <h5 class="text-dark fw-semibold text-uppercase"> Total :</h5>
                                <div class="d-flex gap-1">
                                    <h4 @StaticData.TotalPriceHeadingSelector class="text-dark fw-bolder"></h4>
                                    <h4>@ViewBag.Currency</h4>
                                </div>
                                
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-2 offset-md-5">
                        @if (Model?.Items == null)
                        {
                            <button @StaticData.PostButtonSelector disabled class="btn btn-primary border-0 bg-gradient w-100 py-2">
                                Summary
                            </button>
                        }
                        else
                        {
                            <button @StaticData.PostButtonSelector class="btn btn-primary border-0 bg-gradient w-100 py-2">
                                Summary
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div @StaticData.LoadingScreenSelector id="loading-overlay">
    <div class="spinner-border text-light" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

@functions
{

    public struct StaticData
    {
        public const string inputSelector = "data-input";
        public const string ProductIdMetaSelector = "data-product-id";
        public const string CartItemIdMetaSelector = "data-id-meta";
        public const string LoadingScreenSelector = "data-loading";
        public const string CartIdMetaSelector = "data-cart-id";
        public const string ItemDeleteButtonSelector = "data-delete";
        public const string WarningParagraphSelector = "data-warning";
        public const string PostButtonSelector = "data-post-button";
        public const string CurentPriceMetaSelector = "data-current-price-meta";
        public const string TotalPriceHeadingSelector = "data-total-price";

    }
}

@section Scripts {
    <script src="~/js/Cart/CartTotalPriceCounter.js"></script>
    <script src="~/js/Cart/CartItemQuantityUpdater.js"></script>
    <script src="~/js/Utility/SweetAlertDisplayer.js"></script>
    <script src="~/js/Cart/CartPricesSynchronizationChecker.js"></script>
    <script src="~/js/Cart/CartItemRemover.js"></script>
    <script src="~/js/Cart/CartPoster.js"></script>
    <script src="~/js/Cart/CartQuantityValidator.js"></script>

    <script>
        (() => {
            const sweetAlertDisplayer = new SweetAlertDisplayer();
            const cartTotalPriceCounter = new CartTotalPriceCounter(
                 `[@StaticData.inputSelector]`,
                 `[@StaticData.TotalPriceHeadingSelector]`,
                 `[@StaticData.CurentPriceMetaSelector]`,
            );
            const cartItemRemover = new CartItemRemover(
                `[@StaticData.ItemDeleteButtonSelector]`,
                `[@StaticData.LoadingScreenSelector]`,
                `[@StaticData.CartItemIdMetaSelector]`,
                sweetAlertDisplayer
            );
            const itemQuantityUpdater = new CartItemQuantityUpdater(
                `[@StaticData.inputSelector]`,
                `[@StaticData.CartItemIdMetaSelector]`,
                `[@StaticData.LoadingScreenSelector]`,
            );
            const cartItemsQuantityValidator = new CartInputQuantityValidator(
                `[@StaticData.LoadingScreenSelector]`,
                `[@StaticData.inputSelector]`,
                `[@StaticData.CartItemIdMetaSelector]`,
                `[@StaticData.WarningParagraphSelector]`,
                sweetAlertDisplayer
            );
            const synchronizationChecker = new CartPricesSynchronizationChecker(
                `[@StaticData.inputSelector]`,
                `[@StaticData.LoadingScreenSelector]`,
                `[@StaticData.CartIdMetaSelector]`,
                `[@StaticData.CartItemIdMetaSelector]`,
                `[@StaticData.WarningParagraphSelector]`,
                sweetAlertDisplayer
            )
            const cartPoster = new CartPoster(
                `[@StaticData.PostButtonSelector]`,
                cartItemsQuantityValidator,
                synchronizationChecker
            )


            synchronizationChecker.initialize();
        })();
    </script>
}
