@model Models.ViewModels.ProductBrowserVM
@using Microsoft.AspNetCore.Html;
@using System.Text.Encodings.Web;


@functions {
    public struct StaticData
    {
        public const string NavigationSelector = "data-navigation-ul";
        public const string ItemsDivSelector = "data-items-box";
        public const string InformationParagraphSelector = "data-information";

        public const string PaginationBoxSelector = "data-pagin";
        public const string PaginationArrowSelector = "data-p-arrow";
        public const string PaginationSpacerSelector = "data-p-spacer";
        public const string PaginationEdgeSelector = "data-p-edge";
        public const string PaginationNuberSelector = "data-p-number";

        public const string FilterTextInputId = "textFilter";
        public const string FilterMinPriceInputId = "minPrice";
        public const string FilterMaxPriceInputId = "maxPrice";
        public const string SortSelectId = "sorting";
        public const string OnlyDiscountedCheckboxId = "onlyDiscounted";

        public const string ApplyFiltersButtonSelector = "data-apply-filter-button";
        public const string ClearFiltersButtonSelector = "data-clear-filter-button";

        public const string CurrencyMetaSelector = "data-currency-meta";

        public const string LoadingScreenSelector = "data-loading-screen";
    }
}

<meta @StaticData.CurrencyMetaSelector content="@Model.Currency">
<div class="row mt-4 px-3 d-flex justify-content-center w-100" style="max-width: 1800px">
    <!-- Sidebar -->
    <aside class="col-lg-3">
        <nav class="card">
            <div class="card-header">
                <h5>Categories</h5>
            </div>
            <div class="card-body">
                <ul class="nav flex-column" @StaticData.NavigationSelector>
                    <li class='nav-item  my-1'>
                        <a class='nav-link border-start border-end border-bottom border-primary rounded-2' style='text-decoration: none' href='#'>All</a>
                        <p class='d-none'></p>
                    </li>
                    </br>
                        @foreach (var category in Model.Categories.Where(c => c.ParentCategoryId == null))
                        {
                            @RenderCategory(category)
                        }
                </ul>
            </div>
        </nav>
    </aside>

    <!-- Main content -->
    <main class="col-lg-9">
        <div class="card">
            <div class="card-header">
                <h5>Products</h5>
            </div>
            <div class="card-body d-flex flex-column">
                <form method="GET" action="/products" class="container mt-4 p-4 border rounded">
                    <div class="row">
                        <!-- Left Column -->
                        <div class="col-md-6">
                            <!-- Text Filter -->
                            <div class="mb-3">
                                <label for="@StaticData.FilterTextInputId" class="form-label">Search by Name</label>
                                <input type="text" class="form-control" id="@StaticData.FilterTextInputId" name="textFilter" placeholder="Type product name...">
                            </div>

                            <!-- Minimal Price -->
                            <div class="mb-3">
                                <label for="@StaticData.FilterMinPriceInputId" class="form-label">Minimal Price</label>
                                <input type="number" class="form-control" id="@StaticData.FilterMinPriceInputId" name="minPrice" min="0" placeholder="0">
                            </div>

                            <!-- Maximal Price -->
                            <div class="mb-3">
                                <label for="@StaticData.FilterMaxPriceInputId" class="form-label">Maximal Price</label>
                                <input type="number" class="form-control" id="@StaticData.FilterMaxPriceInputId" name="maxPrice" min="0" placeholder="10000">
                            </div>
                        </div>

                        <div class="col-md-6">
                            <!-- Sorting Dropdown -->
                            <div class="mb-3">
                                <label for="@StaticData.SortSelectId" class="form-label">Sort By</label>
                                <select class="form-select" id="@StaticData.SortSelectId" name="sorting">
                                    <option value="@Utility.Constants.ProductBrowserFilteringOptions.AlphabeticOption">Alphabetic</option>
                                    <option value="@Utility.Constants.ProductBrowserFilteringOptions.PriceAscendingOption">Lowest Price</option>
                                    <option value="@Utility.Constants.ProductBrowserFilteringOptions.PriceDescendingOption">Highest Price</option>
                                </select>
                            </div>

                            <!-- Show Only Discounted -->
                            <div class="form-check mb-3">
                                <input type="checkbox" class="form-check-input" id="@StaticData.OnlyDiscountedCheckboxId" name="onlyDiscounted">
                                <label class="form-check-label" for="@StaticData.OnlyDiscountedCheckboxId">Show Only Discounted</label>
                            </div>

                            <!-- Clear Button -->
                            <div class="mb-3">
                                <button @StaticData.ClearFiltersButtonSelector type="submit" class="btn btn-primary w-100">Clear Filters</button>
                            </div>

                            <!-- Submit Button -->
                            <div class="mb-3">
                                <button @StaticData.ApplyFiltersButtonSelector type="submit" class="btn btn-primary w-100">Apply Filters</button>
                            </div>
                        </div>
                    </div>
                </form>
                <div class="position-relative" style="min-height: 40vh;">
                    <div @StaticData.LoadingScreenSelector id="loading-overlay" class="position-absolute top-0 start-0 w-100 h-100 justify-content-center align-items-center bg-white bg-opacity-75" style="z-index: 10; display:none; min-height: 30vh">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                    <p class="fw-semibold text-primary text-center p-2 mt-2"  @StaticData.InformationParagraphSelector></p>
                    <div @StaticData.ItemsDivSelector class="d-flex flex-wrap p-3" style="row-gap: 1rem"></div>
                </div>
               
                <ul @StaticData.PaginationBoxSelector class="pagination mt-4 align-self-center" style="display: none">

                    <li class="page-item"><a class="page-link" @StaticData.PaginationArrowSelector href="#"><i class="bi bi-chevron-compact-left"></i></a></li>
                    <li class="page-item"><a class="page-link" @StaticData.PaginationEdgeSelector href="#"></a></li>
                    <li class="page-item"><a class="page-link page-link--spacer" @StaticData.PaginationSpacerSelector href="#">...</a></li>
                    <li class="page-item"><a class="page-link " @StaticData.PaginationNuberSelector href="#"></a></li>
                    <li class="page-item"><a class="page-link " @StaticData.PaginationNuberSelector href="#"></a></li>
                    <li class="page-item"><a class="page-link" @StaticData.PaginationNuberSelector href="#"></a></li>
                    <li class="page-item"><a class="page-link page-link--spacer" @StaticData.PaginationSpacerSelector href="#">...</a></li>
                    <li class="page-item"><a class="page-link" @StaticData.PaginationEdgeSelector href="#"></a></li>
                    <li class="page-item"><a class="page-link" @StaticData.PaginationArrowSelector href="#"><i class="bi bi-chevron-compact-right"></i></a></li>
                </ul>

            </div>
        </div>
    </main>
</div>



@functions {
    private IHtmlContent RenderCategory(Category category)
    {
        var content = new HtmlContentBuilder();

        content.AppendHtml("<li class='nav-item  my-1'>");
        content.AppendHtml($"<a class='nav-link border-start border-primary rounded-2' style='text-decoration: none' href='#'>{HtmlEncoder.Default.Encode(category.Name)}</a>");
        content.AppendHtml($"<p class='d-none'>{category.Id}</p>");

        var subCategories = category.SubCategories?.OrderBy(c => c.Name) ?? Enumerable.Empty<Category>();

        if (subCategories.Any())
        {
            content.AppendHtml("<ul class='nav flex-column ms-3'>");
            foreach (var subCategory in subCategories)
            {
                content.AppendHtml(RenderCategory(subCategory));
            }
            content.AppendHtml("</ul>");
        }

        content.AppendHtml("</li>");

        return content;
    }
}

@section Scripts {
    <script src="~/js/ProductBrowser/ProductBrowserCardGenerator.js"></script>
    <script src="~/js/ProductBrowser/ProductBrowserAPIManager.js"></script>
    <script src="~/js/ProductBrowser/ProductBrowserCategoryHandler.js"></script>
    <script src="~/js/ProductBrowser/ProductBrowserFilter.js"></script>
    <script src="~/js/ProductBrowser/ProductBrowserPagination.js"></script>

    <script>
        (() => {
            const productBrowserCardGenerator = new ProductBrowserCardGenerator(
                 `[@StaticData.CurrencyMetaSelector]`,
            )

            const productBrowserApiManager = new ProductBrowserApiManager(
                `[@StaticData.ItemsDivSelector]`,
                `[@StaticData.InformationParagraphSelector]`,
                `[@StaticData.LoadingScreenSelector]`,
                productBrowserCardGenerator
            )

            const productBrowserPagination = new ProductBrowserPagination(
                `[@StaticData.PaginationArrowSelector]`,
                `[@StaticData.PaginationSpacerSelector]`,
                `[@StaticData.PaginationEdgeSelector]`,
                `[@StaticData.PaginationNuberSelector]`,
                `[@StaticData.PaginationBoxSelector]`,
                productBrowserApiManager
            )

            const productBrowserFilter = new ProductBrowserFilter(
                `@StaticData.FilterTextInputId`,
                `@StaticData.FilterMinPriceInputId`,
                `@StaticData.FilterMaxPriceInputId`,
                `@StaticData.OnlyDiscountedCheckboxId`,
                `@StaticData.SortSelectId`,
                `[@StaticData.ClearFiltersButtonSelector]`,
                `[@StaticData.ApplyFiltersButtonSelector]`,
                productBrowserApiManager,
                productBrowserPagination
            )

            const productBrowserHandler = new ProductBrowserCategoryHandler(
                `[@StaticData.NavigationSelector]`,
                productBrowserFilter,
                productBrowserApiManager
            )



        })();
    </script>
}
