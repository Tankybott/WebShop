@using Models.ViewModels
@model CategoryVM
<div class="container">
    <div class="card shadow-lg mt-4">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0 text-center p-2">@(@Model.Category.Id == 0 ? "Add Category" : "Update Category")</h3>
        </div>
        <div class="card-body">
            <form asp-action="Upsert" method="post">
                <input hidden asp-for="Category.Id" class="form-control" />

                <div class="form-floating mb-3">
                    <input asp-for="Category.Name" class="form-control text-capitalize" id="CategoryName" />
                    <label for="CategoryName">Category Name</label>
                    <span asp-validation-for="Category.Name" class="text-danger d-block mt-2 p-1"></span>
                </div>

                @if (string.IsNullOrEmpty(Model.BindedParentName))
                {
                    <div class="form-floating mb-3">
                        <select asp-for="Category.ParentCategoryId" asp-items="Model.CategoryListItems" class="form-select" id="ParentCategory">
                        </select>
                        <label for="ParentCategory">Parent Category</label>
                    </div>
                }
                else
                {
                    <input hidden asp-for="Category.ParentCategoryId" />
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="ParentCategoryName" value="@Model.BindedParentName" readonly />
                        <label for="ParentCategoryName">Parent Category</label>
                    </div>
                }

                <button type="submit" class="btn btn-primary w-100 p-2 text-uppercase">Save</button>
            </form>
        </div>
    </div>
</div>
    @section Scripts {
        @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    }